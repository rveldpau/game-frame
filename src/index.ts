import { app, BrowserWindow, protocol } from 'electron';
import { configure } from './backend/configure';
import { generateArtworkProtocol } from './backend/protocols/gameArt';
import { generateMediaProtocol } from './backend/protocols/media';
import { Game, GameWithArt } from './games/game';
import dotenv from "dotenv";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

dotenv.config();

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

app.commandLine.appendSwitch('trace-warnings')

const createWindow = (): void => {
  const {session} = require('electron')
  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
      callback({responseHeaders: {
        ...details.responseHeaders ?? {},
        "Content-Security-Policy": `self`
      } })
  })
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    fullscreen: true,
    frame: false,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true
      //devTools: false
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

app.on("ready", async () => {
  const daos = await configure();
  protocol.registerFileProtocol('artwork', generateArtworkProtocol(daos.gamesDAO));
  protocol.registerFileProtocol('media', generateMediaProtocol());

  createWindow();
})

app.whenReady().then(() => {
})

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
